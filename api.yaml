openapi: 3.1.0
info:
  title: BINJ Hub
  description: The BINJ Hub API that provides authorization and music voting.
  version: 1.1.4
servers:
  - url: "/api"
paths:
  /auth:
    summary: Redirects to Microsoft OAuth.
    get:
      operationId: AuthRedirect
      parameters:
        - name: returnUrl
          in: query
          schema:
            type: string
      responses:
        3XX:
          description: Redirects to Microsoft OAuth.
          headers:
            Location:
              description: Redirect URL of Microsoft OAuth.
              schema:
                type: string
  /auth/callback:
    summary: Callback URL for Microsoft OAuth.
    get:
      operationId: AuthCallback
      parameters:
        - name: returnUrl
          in: query
          schema:
            type: string
        - name: code
          in: query
          schema:
            type: string
        - name: id_token
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        3XX:
          description: Redirects to the return URL.
          headers:
            Location:
              description: Redirection URL.
              schema:
                type: string
  /auth/logout:
    summary: Log out the user.
    get:
      operationId: AuthLogout
      parameters:
        - name: returnUrl
          in: query
          schema:
            type: string
        - name: upstream
          in: query
          schema:
            type: boolean
            default: true
      responses:
        3XX:
          description: Logs out the user and redirects to OAuth logout URL or returnUrl.
          headers:
            Location:
              description: Redirection URL.
              schema:
                type: string
  /me:
    summary: The user making the request.
    get:
      operationId: GetMe
      description: Requests the user profile.
      responses:
        default:
          description: Returns the auth status and profile.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
  /recommendations:
    summary: Song recommendations.
    get:
      operationId: GetSongRecommendations
      description: List song recommendations.
      parameters:
        - name: skip
          schema:
            type: integer
          in: query
          description: The number of entries to skip.
        - name: top
          schema:
            type: integer
          in: query
          description: The maximum number of entries to return.
        - name: orderBy
          schema:
            enum: [modified, created, id]
          in: query
          description: The sort order of the returned recommendations.
      responses:
        default:
          description: The list of song recommendations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Recommendation"
    post:
      operationId: PostSongRecommendations
      description: Create a song recommendation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecommendationNew"
      responses:
        default:
          description: The created song recommendation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Recommendation"
        401:
          $ref: "#/components/responses/Unauthorized"
  /recommendations/{id}:
    summary: A song recommendation.
    parameters:
      - $ref: "#/components/parameters/RecommendationIdPath"
    patch:
      operationId: PatchSongRecommendationId
      description: Updates a song recommendation by ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        default:
          description: The updated song recommendation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Recommendation"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      operationId: DeleteSongRecommendationId
      description: Deletes a song recommendation by ID.
      responses:
        default:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  /recommendations/{id}/votes:
    summary: Votes for a song recommendation.
    parameters:
      - $ref: "#/components/parameters/RecommendationIdPath"
    post:
      operationId: PostRecommendationVote
      description: Create a recommendation vote.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Votes"
      responses:
        default:
          description: The updated recommendation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Recommendation"
        401:
          $ref: "#/components/responses/Unauthorized"
components:
  schemas:
    Recommendation:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        url:
          type: string
        reason:
          type: string
        flag:
          type: integer
        votes:
          $ref: "#/components/schemas/Votes"
        myVotes:
          $ref: "#/components/schemas/Votes"
        user:
          $ref: "#/components/schemas/User"
    Votes:
      type: object
      properties:
        up:
          type: integer
        down:
          type: integer
    RecommendationNew:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
        reason:
          type: string
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        flag:
          type: integer
  responses:
    Unauthorized:
      description: User is not authorized.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                enum: [false]
              message:
                type: string
    Forbidden:
      description: User is forbidden to access this resource.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                enum: [false]
              message:
                type: string
  parameters:
    RecommendationIdPath:
      name: id
      in: path
      description: ID of the recommendation.
      schema:
        type: integer
      required: true
  securitySchemes:
    cookie:
      type: apiKey
      name: session
      in: cookie
      description: The session cookie.
security:
  - cookie: []
